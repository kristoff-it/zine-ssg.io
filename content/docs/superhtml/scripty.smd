---
.title = "SuperHTML Scripty Reference",
.description = "",
.author = "Loris Cro",
.layout = "scripty-reference.shtml",
.date = @date("2023-06-16T00:00:00"),
.draft = false,
---
[]($section.id('menu'))

># [Global Context]($block.collapsible(true))
>- [`$site`]($link.unsafeRef("$site"))
>- [`$page`]($link.unsafeRef("$page"))
>- [`$build`]($link.unsafeRef("$build"))
>- [`$i18n`]($link.unsafeRef("$i18n"))
>- [`$ctx`]($link.unsafeRef("$ctx"))
>- [`$loop`]($link.unsafeRef("$loop"))
>- [`$if`]($link.unsafeRef("$if"))

># [Site]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Site"))
>- [`.host_url`]($link.unsafeRef("Site.host_url"))
>- [`.title`]($link.unsafeRef("Site.title"))
>- [`fn localeCode()`]($link.ref("Site.localeCode")) 
>- [`fn localeName()`]($link.ref("Site.localeName")) 
>- [`fn link()`]($link.ref("Site.link")) 
>- [`fn asset()`]($link.ref("Site.asset")) 
>- [`fn page()`]($link.ref("Site.page")) 
>- [`fn pages()`]($link.ref("Site.pages")) 
>- [`fn locale()`]($link.ref("Site.locale")) 

># [Page]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Page"))
>- [`.title`]($link.unsafeRef("Page.title"))
>- [`.description`]($link.unsafeRef("Page.description"))
>- [`.author`]($link.unsafeRef("Page.author"))
>- [`.date`]($link.unsafeRef("Page.date"))
>- [`.layout`]($link.unsafeRef("Page.layout"))
>- [`.draft`]($link.unsafeRef("Page.draft"))
>- [`.tags`]($link.unsafeRef("Page.tags"))
>- [`.aliases`]($link.unsafeRef("Page.aliases"))
>- [`.alternatives`]($link.unsafeRef("Page.alternatives"))
>- [`.skip_subdirs`]($link.unsafeRef("Page.skip_subdirs"))
>- [`.translation_key`]($link.unsafeRef("Page.translation_key"))
>- [`.custom`]($link.unsafeRef("Page.custom"))
>- [`fn isCurrent()`]($link.ref("Page.isCurrent")) 
>- [`fn asset()`]($link.ref("Page.asset")) 
>- [`fn site()`]($link.ref("Page.site")) 
>- [`fn locale()`]($link.ref("Page.locale")) 
>- [`fn locale?()`]($link.ref("Page.locale?")) 
>- [`fn locales()`]($link.ref("Page.locales")) 
>- [`fn wordCount()`]($link.ref("Page.wordCount")) 
>- [`fn parentSection()`]($link.ref("Page.parentSection")) 
>- [`fn isSection()`]($link.ref("Page.isSection")) 
>- [`fn subpages()`]($link.ref("Page.subpages")) 
>- [`fn subpagesAlphabetic()`]($link.ref("Page.subpagesAlphabetic")) 
>- [`fn nextPage?()`]($link.ref("Page.nextPage?")) 
>- [`fn prevPage?()`]($link.ref("Page.prevPage?")) 
>- [`fn hasNext()`]($link.ref("Page.hasNext")) 
>- [`fn hasPrev()`]($link.ref("Page.hasPrev")) 
>- [`fn link()`]($link.ref("Page.link")) 
>- [`fn linkRef()`]($link.ref("Page.linkRef")) 
>- [`fn alternative()`]($link.ref("Page.alternative")) 
>- [`fn content()`]($link.ref("Page.content")) 
>- [`fn contentSection()`]($link.ref("Page.contentSection")) 
>- [`fn hasContentSection()`]($link.ref("Page.hasContentSection")) 
>- [`fn contentSections()`]($link.ref("Page.contentSections")) 
>- [`fn footnotes?()`]($link.ref("Page.footnotes?")) 
>- [`fn toc()`]($link.ref("Page.toc")) 

># [Ctx]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Ctx"))

># [Alternative]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Alternative"))
>- [`.name`]($link.unsafeRef("Alternative.name"))
>- [`.layout`]($link.unsafeRef("Alternative.layout"))
>- [`.output`]($link.unsafeRef("Alternative.output"))
>- [`.type`]($link.unsafeRef("Alternative.type"))
>- [`fn link()`]($link.ref("Alternative.link")) 

># [ContentSection]($block.collapsible(false))
>- [`description`]($link.unsafeRef("ContentSection"))
>- [`.id`]($link.unsafeRef("ContentSection.id"))
>- [`.data`]($link.unsafeRef("ContentSection.data"))
>- [`fn heading()`]($link.ref("ContentSection.heading")) 
>- [`fn heading?()`]($link.ref("ContentSection.heading?")) 
>- [`fn html()`]($link.ref("ContentSection.html")) 
>- [`fn htmlNoHeading()`]($link.ref("ContentSection.htmlNoHeading")) 

># [Footnote]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Footnote"))
>- [`.def_id`]($link.unsafeRef("Footnote.def_id"))
>- [`.ref_ids`]($link.unsafeRef("Footnote.ref_ids"))
>- [`fn html()`]($link.ref("Footnote.html")) 

># [Build]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Build"))
>- [`.generated`]($link.unsafeRef("Build.generated"))
>- [`fn asset()`]($link.ref("Build.asset")) 
>- [`fn git()`]($link.ref("Build.git")) 
>- [`fn git?()`]($link.ref("Build.git?")) 

># [Git]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Git"))
>- [`.commit_hash`]($link.unsafeRef("Git.commit_hash"))
>- [`.commit_date`]($link.unsafeRef("Git.commit_date"))
>- [`.commit_message`]($link.unsafeRef("Git.commit_message"))
>- [`.author_name`]($link.unsafeRef("Git.author_name"))
>- [`.author_email`]($link.unsafeRef("Git.author_email"))
>- [`fn tag()`]($link.ref("Git.tag")) 
>- [`fn tag?()`]($link.ref("Git.tag?")) 
>- [`fn branch()`]($link.ref("Git.branch")) 
>- [`fn branch?()`]($link.ref("Git.branch?")) 

># [Asset]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Asset"))
>- [`fn link()`]($link.ref("Asset.link")) 
>- [`fn size()`]($link.ref("Asset.size")) 
>- [`fn bytes()`]($link.ref("Asset.bytes")) 
>- [`fn sriHash()`]($link.ref("Asset.sriHash")) 
>- [`fn ziggy()`]($link.ref("Asset.ziggy")) 

># [Map]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Map"))
>- [`fn getOr()`]($link.ref("Map.getOr")) 
>- [`fn get()`]($link.ref("Map.get")) 
>- [`fn get?()`]($link.ref("Map.get?")) 
>- [`fn has()`]($link.ref("Map.has")) 
>- [`fn iterate()`]($link.ref("Map.iterate")) 
>- [`fn iterPattern()`]($link.ref("Map.iterPattern")) 

># [?any]($block.collapsible(false))
>- [`description`]($link.unsafeRef("?any"))

># [String]($block.collapsible(false))
>- [`description`]($link.unsafeRef("String"))
>- [`fn len()`]($link.ref("String.len")) 
>- [`fn contains()`]($link.ref("String.contains")) 
>- [`fn endsWith()`]($link.ref("String.endsWith")) 
>- [`fn eql()`]($link.ref("String.eql")) 
>- [`fn basename()`]($link.ref("String.basename")) 
>- [`fn suffix()`]($link.ref("String.suffix")) 
>- [`fn prefix()`]($link.ref("String.prefix")) 
>- [`fn fmt()`]($link.ref("String.fmt")) 
>- [`fn addPath()`]($link.ref("String.addPath")) 
>- [`fn syntaxHighlight()`]($link.ref("String.syntaxHighlight")) 
>- [`fn parseInt()`]($link.ref("String.parseInt")) 
>- [`fn parseDate()`]($link.ref("String.parseDate")) 
>- [`fn splitN()`]($link.ref("String.splitN")) 
>- [`fn lower()`]($link.ref("String.lower")) 

># [Date]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Date"))
>- [`fn gt()`]($link.ref("Date.gt")) 
>- [`fn lt()`]($link.ref("Date.lt")) 
>- [`fn eq()`]($link.ref("Date.eq")) 
>- [`fn format()`]($link.ref("Date.format")) 
>- [`fn formatHTTP()`]($link.ref("Date.formatHTTP")) 

># [Bool]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Bool"))
>- [`fn then()`]($link.ref("Bool.then")) 
>- [`fn not()`]($link.ref("Bool.not")) 
>- [`fn and()`]($link.ref("Bool.and")) 
>- [`fn or()`]($link.ref("Bool.or")) 

># [Int]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Int"))
>- [`fn eq()`]($link.ref("Int.eq")) 
>- [`fn gt()`]($link.ref("Int.gt")) 
>- [`fn plus()`]($link.ref("Int.plus")) 
>- [`fn div()`]($link.ref("Int.div")) 
>- [`fn byteSize()`]($link.ref("Int.byteSize")) 

># [Float]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Float"))

># [Iterator]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Iterator"))
>- [`.it`]($link.unsafeRef("Iterator.it"))
>- [`.idx`]($link.unsafeRef("Iterator.idx"))
>- [`.first`]($link.unsafeRef("Iterator.first"))
>- [`.last`]($link.unsafeRef("Iterator.last"))
>- [`.len`]($link.unsafeRef("Iterator.len"))
>- [`fn up()`]($link.ref("Iterator.up")) 

># [Array]($block.collapsible(false))
>- [`description`]($link.unsafeRef("Array"))
>- [`.len`]($link.unsafeRef("Array.len"))
>- [`.empty`]($link.unsafeRef("Array.empty"))
>- [`fn slice()`]($link.ref("Array.slice")) 
>- [`fn at()`]($link.ref("Array.at")) 
>- [`fn first?()`]($link.ref("Array.first?")) 
>- [`fn last?()`]($link.ref("Array.last?")) 

># [KV]($block.collapsible(false))
>- [`description`]($link.unsafeRef("KV"))
>- [`.key`]($link.unsafeRef("KV.key"))
>- [`.value`]($link.unsafeRef("KV.value"))

># [err]($block.collapsible(false))
>- [`description`]($link.unsafeRef("err"))
# [Global Context]($section.id('global'))

## [`$site`]($text.id('$site')) : [Site]($link.ref("Site"))

The current website. In a multilingual website,
each locale will have its own separate instance of $site

## [`$page`]($text.id('$page')) : [Page]($link.ref("Page"))

The page being currently rendered.

## [`$build`]($text.id('$build')) : [Build]($link.ref("Build"))

Gives you access to build-time assets (i.e. assets built
 via the Zig build system) alongside other information
relative to the current build.

## [`$i18n`]($text.id('$i18n')) : [Map]($link.ref("Map"))

In a multilingual website it contains the translations 
defined in the corresponding i18n file.

See the i18n docs for more info.

## [`$ctx`]($text.id('$ctx')) : [Ctx]($link.ref("Ctx"))

A key-value mapping that contains data defined in `<ctx>`
nodes.

## [`$loop`]($text.id('$loop')) : ?[Iterator]($link.ref("Iterator"))

The current iterator, only available within elements
that have a `loop` attribute.

## [`$if`]($text.id('$if')) : ?[any]($link.ref("any"))

The current branching variable, only available within elements
that have an `if` attribute used to unwrap an optional value.

# [Site]($section.id('Site'))

The global site configuration. The fields come from the call to 
`website` in your `build.zig`.
 
 Gives you also access to assets and static assets from the directories 
 defined in your site configuration.

## Fields

### [`host_url`]($text.id('Site.host_url')) : [String]($link.ref("String"))

The host URL, as defined in your `build.zig`.

### [`title`]($text.id('Site.title')) : [String]($link.ref("String"))

The website title, as defined in your `build.zig`.

## Functions

### []($heading.id("Site.localeCode")) [`fn`]($link.ref("Site.localeCode")) localeCode () -> [String]($link.ref("String"))

In a multilingual website, returns the locale of the current 
variant as defined in your `build.zig` file. 

#### Examples

```superhtml
<html lang="$site.localeCode()"></html>
```
### []($heading.id("Site.localeName")) [`fn`]($link.ref("Site.localeName")) localeName () -> [String]($link.ref("String"))

In a multilingual website, returns the locale name of the current 
variant as defined in your `build.zig` file. 

#### Examples

```superhtml
<span :text="$site.localeName()"></span>
```
### []($heading.id("Site.link")) [`fn`]($link.ref("Site.link")) link () -> [String]($link.ref("String"))

Returns a link to the homepage of the website.

Correctly links to a subpath when correct to do so in a  
multilingual website.

#### Examples

```superhtml
<a href="$site.link()" :text="$site.title"></a>
```
### []($heading.id("Site.asset")) [`fn`]($link.ref("Site.asset")) asset ([String]($link.ref("String"))) -> [Asset]($link.ref("Asset"))

Retuns an asset by name from inside the assets directory.

#### Examples

```superhtml
<img src="$site.asset('foo.png').link()">
```
### []($heading.id("Site.page")) [`fn`]($link.ref("Site.page")) page ([String]($link.ref("String"))) -> [Page]($link.ref("Page"))

Finds a page by path.

Paths are relative to the content directory and should exclude
the markdown suffix as Zine will automatically infer which file
naming convention is used by the target page. 

For example, the value 'foo/bar' will be automatically
matched by Zine with either:
 - content/foo/bar.smd
 - content/foo/bar/index.smd

To reference the site homepage, pass an empty string.

#### Examples

```superhtml
<a href="$site.page('downloads').link()">Downloads</a>
```
### []($heading.id("Site.pages")) [`fn`]($link.ref("Site.pages")) pages ([[String]($link.ref("String"))...]) -> [[Page]($link.ref("Page"))] *(see also [[any]]($link.ref("Array")))*   

Same as `page`, but accepts a variable number of page references and 
loops over them in the provided order. All pages must exist.

Calling this function with no arguments will loop over all pages
of the site.

To be used in conjunction with a `loop` attribute.

#### Examples

```superhtml
<ul :loop="$site.pages('a', 'b', 'c')"><li :text="$loop.it.title"></li></ul>
<ul :loop="$site.pages()"><li :text="$loop.it.title"></li></ul>
```
### []($heading.id("Site.locale")) [`fn`]($link.ref("Site.locale")) locale ([String]($link.ref("String"))) -> [Site]($link.ref("Site"))

Returns the Site corresponding to the provided locale code.

Only available in multilingual websites.

#### Examples

```superhtml
<a href="$site.locale('en-US').link()">Murica</a>
```
# [Page]($section.id('Page'))

The page currently being rendered.

## Fields

### [`title`]($text.id('Page.title')) : [String]($link.ref("String"))

Title of the page, 
as set in the SuperMD frontmatter.

### [`description`]($text.id('Page.description')) : [String]($link.ref("String"))

Description of the page, 
as set in the SuperMD frontmatter.

### [`author`]($text.id('Page.author')) : [String]($link.ref("String"))

Author of the page, 
as set in the SuperMD frontmatter.

### [`date`]($text.id('Page.date')) : [Date]($link.ref("Date"))

Publication date of the page, 
as set in the SuperMD frontmatter.

Used to provide default ordering of pages.

### [`layout`]($text.id('Page.layout')) : [String]($link.ref("String"))

SuperHTML layout used to render the page, 
as set in the SuperMD frontmatter.

### [`draft`]($text.id('Page.draft')) : [Bool]($link.ref("Bool"))

When set to true the page will not be rendered in release mode, 
as set in the SuperMD frontmatter.

### [`tags`]($text.id('Page.tags')) : [[String]($link.ref("String"))] *(see also [[any]]($link.ref("Array")))*   

Tags associated with the page, 
as set in the SuperMD frontmatter.

### [`aliases`]($text.id('Page.aliases')) : [[String]($link.ref("String"))] *(see also [[any]]($link.ref("Array")))*   

Aliases of the current page, 
as set in the SuperMD frontmatter.

Aliases can be used to make the same page available
from different locations.

Every entry in the list is an output location where the 
rendered page will be copied to.

### [`alternatives`]($text.id('Page.alternatives')) : [[Alternative]($link.ref("Alternative"))] *(see also [[any]]($link.ref("Array")))*   

Alternative versions of the page, 
as set in the SuperMD frontmatter.

Alternatives are a good way of implementing RSS feeds, for example.

### [`skip_subdirs`]($text.id('Page.skip_subdirs')) : [Bool]($link.ref("Bool"))

Skips any other potential content present in the subdir of the page, 
as set in the SuperMD frontmatter.

Can only be set to true on section pages (i.e. `index.smd` pages).

### [`translation_key`]($text.id('Page.translation_key')) : ?[String]($link.ref("String"))

Translation key used to map this page with corresponding localized variants, 
as set in the SuperMD frontmatter.

See the docs on i18n for more info.

### [`custom`]($text.id('Page.custom')) : [any]($link.ref("any"))

A Ziggy map where you can define custom properties for the page, 
as set in the SuperMD frontmatter.

## Functions

### []($heading.id("Page.isCurrent")) [`fn`]($link.ref("Page.isCurrent")) isCurrent () -> [Bool]($link.ref("Bool"))

Returns true if the target page is the one currently being 
rendered. 

To be used in conjunction with the various functions that give 
you references to other pages, like `$site.page()`, for example.

#### Examples

```superhtml
<div class="$site.page('foo').isCurrent().then('selected')"></div>
```
### []($heading.id("Page.asset")) [`fn`]($link.ref("Page.asset")) asset ([String]($link.ref("String"))) -> [Asset]($link.ref("Asset"))

Retuns an asset by name from inside the page's asset directory.

Assets for a non-section page must be placed under a subdirectory 
that shares the same name with the corresponding markdown file.

(as a reminder sections are defined by pages named `index.smd`)

| section? |     page path      | asset directory |
|----------|--------------------|-----------------|
|   yes    | blog/foo/index.smd |    blog/foo/    |
|   no     | blog/bar.smd       |    blog/bar/    |

#### Examples

```superhtml
<img src="$page.asset('foo.png').link(false)">
```
### []($heading.id("Page.site")) [`fn`]($link.ref("Page.site")) site () -> [Site]($link.ref("Site"))

Returns the Site that the page belongs to.

#### Examples

```superhtml
<div :text="$page.site().localeName()"></div>
```
### []($heading.id("Page.locale")) [`fn`]($link.ref("Page.locale")) locale ([String]($link.ref("String"))) -> ?[Page]($link.ref("Page"))

Returns a reference to a localized variant of the target page.


#### Examples

```superhtml
<div :text="$page.locale('en-US').title"></div>
```
### []($heading.id("Page.locale?")) [`fn`]($link.ref("Page.locale?")) locale? ([String]($link.ref("String"))) -> ?[Page]($link.ref("Page"))

Returns a reference to a localized variant of the target page, if
present. Returns null otherwise.

To be used in conjunction with an `if` attribute.

#### Examples

```superhtml
<div :if="$page.locale?('en-US')">
  <a href="$if.link()" :text="$if.title"></a>
</div>
```
### []($heading.id("Page.locales")) [`fn`]($link.ref("Page.locales")) locales () -> [[Page]($link.ref("Page"))] *(see also [[any]]($link.ref("Array")))*   

Returns the list of localized variants of the current page.

#### Examples

```superhtml
<div :loop="$page.locales()"><a href="$loop.it.link()" :text="$loop.it.title"></a></div>
```
### []($heading.id("Page.wordCount")) [`fn`]($link.ref("Page.wordCount")) wordCount () -> [Int]($link.ref("Int"))

Returns the word count of the page.

The count is performed assuming 5-letter words, so it actually
counts all characters and divides the result by 5.

#### Examples

```superhtml
<div :loop="$page.wordCount()"></div>
```
### []($heading.id("Page.parentSection")) [`fn`]($link.ref("Page.parentSection")) parentSection () -> [Page]($link.ref("Page"))

Returns the parent section of a page. 

It's always an error to call this function on the site's main 
index page as it doesn't have a parent section.

#### Examples

```superhtml
$page.parentSection()
```
### []($heading.id("Page.isSection")) [`fn`]($link.ref("Page.isSection")) isSection () -> [Bool]($link.ref("Bool"))

Returns true if the current page defines a section (i.e. if 
the current page is an 'index.smd' page).


#### Examples

```superhtml
$page.isSection()
```
### []($heading.id("Page.subpages")) [`fn`]($link.ref("Page.subpages")) subpages () -> [[Page]($link.ref("Page"))] *(see also [[any]]($link.ref("Array")))*   

Returns a list of all the pages in this section. If the page is 
not a section, returns an empty list.

Sections are defined by `index.smd` files, see the content 
structure section in the official docs for more info.

#### Examples

```superhtml
<div :loop="$page.subpages()">
  <span :text="$loop.it.title"></span>
</div>
```
### []($heading.id("Page.subpagesAlphabetic")) [`fn`]($link.ref("Page.subpagesAlphabetic")) subpagesAlphabetic () -> [[Page]($link.ref("Page"))] *(see also [[any]]($link.ref("Array")))*   

Same as `subpages`, but returns the pages in alphabetic order by
comparing their titles. 

#### Examples

```superhtml
<div :loop="$page.subpagesAlphabetic()">
  <span :text="$loop.it.title"></span>
</div>
```
### []($heading.id("Page.nextPage?")) [`fn`]($link.ref("Page.nextPage?")) nextPage? () -> ?[Page]($link.ref("Page"))

Returns the next page in the same section, sorted by date. 

The returned value is an optional to be used in conjunction 
with an `if` attribute. Use `$if` to access the unpacked value
within the `if` block.

#### Examples

```superhtml
<div :if="$page.nextPage()">
  <span :text="$if.title"></span>
</div>
```
### []($heading.id("Page.prevPage?")) [`fn`]($link.ref("Page.prevPage?")) prevPage? () -> ?[Page]($link.ref("Page"))

Tries to return the page before the target one (sorted by date), to be used with an `if` attribute.

#### Examples

```superhtml
<div :if="$page.prevPage()"></div>
```
### []($heading.id("Page.hasNext")) [`fn`]($link.ref("Page.hasNext")) hasNext () -> [Bool]($link.ref("Bool"))

Returns true of the target page has another page after (sorted by date) 

#### Examples

```superhtml
$page.hasNext()
```
### []($heading.id("Page.hasPrev")) [`fn`]($link.ref("Page.hasPrev")) hasPrev () -> [Bool]($link.ref("Bool"))

Returns true of the target page has another page before (sorted by date) 

#### Examples

```superhtml
$page.hasPrev()
```
### []($heading.id("Page.link")) [`fn`]($link.ref("Page.link")) link () -> [String]($link.ref("String"))

Returns the URL of the target page.

In multilingual sites, if the target page belongs to a different
localized variant, the link will containt the full host URL if
'host_url_override' was specified for either page.

#### Examples

```superhtml
$page.link()
```
### []($heading.id("Page.linkRef")) [`fn`]($link.ref("Page.linkRef")) linkRef ([String]($link.ref("String"))) -> [String]($link.ref("String"))

Returns the URL of the target page, allowing you 
to specify a fragment id to deep-link to a specific
element of the content page.

The id will be checked by Zine and an error will be  
reported if it does not exist.

See the SuperMD reference documentation to learn how to give
ids to elements.

#### Examples

```superhtml
$page.linkRef('foo')
```
### []($heading.id("Page.alternative")) [`fn`]($link.ref("Page.alternative")) alternative ([String]($link.ref("String"))) -> [Alternative]($link.ref("Alternative"))

Returns an alternative by name.

#### Examples

```superhtml
<ctx alt="$page.alternative('rss')">
  <a href="$ctx.alt.link()" 
     type="$ctx.alt.type" 
     :text="$ctx.alt.name"
  ></a>
```
### []($heading.id("Page.content")) [`fn`]($link.ref("Page.content")) content () -> [String]($link.ref("String"))

Renders the full Markdown page to HTML

#### Examples

```superhtml

```
### []($heading.id("Page.contentSection")) [`fn`]($link.ref("Page.contentSection")) contentSection ([String]($link.ref("String"))) -> [String]($link.ref("String"))

Renders the specified [content section]($link.page('docs/supermd/scripty').ref('Section')) of a page.

#### Examples

```superhtml
<div :html="$page.contentSection('section-id')"></div>
<div :html="$page.contentSection('other-section')"></div>
```
### []($heading.id("Page.hasContentSection")) [`fn`]($link.ref("Page.hasContentSection")) hasContentSection ([String]($link.ref("String"))) -> [String]($link.ref("String"))

Returns true if the page contains a content-section with the given id

#### Examples

```superhtml
<div :html="$page.hasContentSection('section-id')"></div>
<div :html="$page.hasContentSection('other-section')"></div>
```
### []($heading.id("Page.contentSections")) [`fn`]($link.ref("Page.contentSections")) contentSections () -> [[ContentSection]($link.ref("ContentSection"))] *(see also [[any]]($link.ref("Array")))*   

Returns a list of sections for the current page.

A page that doesn't define any section will have
a default section for the whole document with a 
null id.

#### Examples

```superhtml
<div :html="$page.contentSections()"></div>
```
### []($heading.id("Page.footnotes?")) [`fn`]($link.ref("Page.footnotes?")) footnotes? () -> ?[[Footnote]($link.ref("Footnote"))]

Returns a list of footnotes for the current page, if any exist.

#### Examples

```superhtml
<ctx :if="$page.footnotes?()">
  <ol :loop="$if">
    <li id="$loop.it.def_id">
      <ctx :html="$loop.it.html()"></ctx>
      <ctx :loop="$loop.it.ref_ids">
        <a href="$loop.it.prefix('#')" :html="$loop.idx"></a>
      </ctx>
    </li>
  </ol>
</ctx>
```
### []($heading.id("Page.toc")) [`fn`]($link.ref("Page.toc")) toc () -> [String]($link.ref("String"))

Renders the table of content.

#### Examples

```superhtml
<div :html="$page.toc()"></div>
```
# [Ctx]($section.id('Ctx'))

A special map that contains all the attributes
 defined on `<ctx>` in the current scope.

You can access the available fields using dot notation.

Example:
```superhtml
<div>
  <ctx foo="(scripty expr)" bar="(scripty expr)"> 
    <span :text="$ctx.foo"></span>
    <span :text="$ctx.bar"></span>
  </ctx>
</div>
```

# [Alternative]($section.id('Alternative'))

An alternative version of the current page. Title and type
can be used when generating `<link rel="alternate">` elements.

## Fields

### [`name`]($text.id('Alternative.name')) : [String]($link.ref("String"))

A name that can be used to fetch this alternative version
of the page.

### [`layout`]($text.id('Alternative.layout')) : [String]($link.ref("String"))

The SuperHTML layout to use to generate this alternative version of the page.

### [`output`]($text.id('Alternative.output')) : [String]($link.ref("String"))

Output path where to to put the generated alternative.

### [`type`]($text.id('Alternative.type')) : [String]($link.ref("String"))

A metadata field that can be used to set the content-type of this alternative version of the Page. 

Useful for example to generate RSS links:

```superhtml
<ctx alt="$page.alternative('rss')">
  <a href="$ctx.alt.link()" 
     type="$ctx.alt.type" 
     :text="$ctx.alt.name"
  ></a>
</ctx>
```

## Functions

### []($heading.id("Alternative.link")) [`fn`]($link.ref("Alternative.link")) link () -> [String]($link.ref("String"))

Returns the URL of the target alternative.

#### Examples

```superhtml
$page.alternative("rss").link()
```
# [ContentSection]($section.id('ContentSection'))

A content section from a page.

## Fields

### [`id`]($text.id('ContentSection.id')) : [String]($link.ref("String"))

The id of the current section.

### [`data`]($text.id('ContentSection.data')) : [Map]($link.ref("Map"))

A Ziggy Map that contains data key-value pairs set in SuperMD

## Functions

### []($heading.id("ContentSection.heading")) [`fn`]($link.ref("ContentSection.heading")) heading () -> [String]($link.ref("String"))

If the section starts with a heading element,
this function returns the heading as simple text.           

#### Examples

```superhtml
<div :html="$loop.it.heading()"></div>
```
### []($heading.id("ContentSection.heading?")) [`fn`]($link.ref("ContentSection.heading?")) heading? () -> ?[String]($link.ref("String"))

If the section starts with a heading element,
this function returns the heading as simple text.           

#### Examples

```superhtml
<div :html="$loop.it.heading()"></div>
```
### []($heading.id("ContentSection.html")) [`fn`]($link.ref("ContentSection.html")) html () -> [String]($link.ref("String"))

Renders the section.

#### Examples

```superhtml
<div :html="$loop.it.html()"></div>
```
### []($heading.id("ContentSection.htmlNoHeading")) [`fn`]($link.ref("ContentSection.htmlNoHeading")) htmlNoHeading () -> [String]($link.ref("String"))

Renders the section but omits the section heading if present.

#### Examples

```superhtml
<div :html="$loop.it.htmlNoHeading()"></div>
```
# [Footnote]($section.id('Footnote'))

A footnote from a page.

## Fields

### [`def_id`]($text.id('Footnote.def_id')) : [String]($link.ref("String"))

The ID for the footnote definition.

### [`ref_ids`]($text.id('Footnote.ref_ids')) : [[String]($link.ref("String"))] *(see also [[any]]($link.ref("Array")))*   

The IDs of the footnote's references,
to be used for creating backlinks.

## Functions

### []($heading.id("Footnote.html")) [`fn`]($link.ref("Footnote.html")) html () -> [String]($link.ref("String"))

Renders the footnote definition.

#### Examples

```superhtml

```
# [Build]($section.id('Build'))

Gives you access to build-time assets and other build related info.
When inside of a git repository it also gives git-related metadata.

## Fields

### [`generated`]($text.id('Build.generated')) : [Date]($link.ref("Date"))

Returns the current date when the build is taking place.

># [Note]($block.attrs('note'))
>Using this function will not add a dependency on the current time
>for the page, hence the name `generated`. 
>
>To get the best results, use in conjunction with caching as otherwise
>the page will be regenerated anew every single time.

## Functions

### []($heading.id("Build.asset")) [`fn`]($link.ref("Build.asset")) asset ([String]($link.ref("String"))) -> [Asset]($link.ref("Asset"))

Retuns a build-time asset (i.e. an asset generated through your 'build.zig' file) by name.

#### Examples

```superhtml
<div :text="$build.asset('foo').bytes()"></div>
```
### []($heading.id("Build.git")) [`fn`]($link.ref("Build.git")) git () -> [Git]($link.ref("Git"))

Returns git-related metadata if you are inside a git repository.
If you are not or the parsing failes, it will return an error.
Packed object are not supported, commit anything to get the metadata.

#### Examples

```superhtml
<div :text="$build.git()..."></div>
```
### []($heading.id("Build.git?")) [`fn`]($link.ref("Build.git?")) git? () -> [Git]($link.ref("Git"))

Returns git-related metadata if you are inside a git repository.
If you are not or the parsing failes, it will return null.
Packed object are not supported, commit anything to get the metadata.

#### Examples

```superhtml
<div :if="$build.git?()">...</div>
```
# [Git]($section.id('Git'))

Information about the current git repository.

## Fields

### [`commit_hash`]($text.id('Git.commit_hash')) : [String]($link.ref("String"))

The current commit hash.

### [`commit_date`]($text.id('Git.commit_date')) : [Date]($link.ref("Date"))

The date of the current commit.

### [`commit_message`]($text.id('Git.commit_message')) : [String]($link.ref("String"))

The commit message of the current commit.

### [`author_name`]($text.id('Git.author_name')) : [String]($link.ref("String"))

The name of the author of the current commit.

### [`author_email`]($text.id('Git.author_email')) : [String]($link.ref("String"))

The email of the author of the current commit.

## Functions

### []($heading.id("Git.tag")) [`fn`]($link.ref("Git.tag")) tag () -> [String]($link.ref("String"))

Returns the tag of the current commit.
If the current commit does not have a tag, an error is returned.

#### Examples

```superhtml
<div :text="$build.git().tag()"></div>
<div :if="$build.git?()"><span :text="$if.tag()"></span></div>
```
### []($heading.id("Git.tag?")) [`fn`]($link.ref("Git.tag?")) tag? () -> [String]($link.ref("String"))

Returns the tag of the current commit.
If the current commit does not have a tag, null is returned.

#### Examples

```superhtml
<div :if="$build.git().tag?()"><span :text="$if"></span></div>
<div :if="$build.git?()"><span :if="$if.tag?()"><span :text="$if"></span></span></div>
```
### []($heading.id("Git.branch")) [`fn`]($link.ref("Git.branch")) branch () -> [String]($link.ref("String"))

Returns the branch of the current commit.
If the current commit does not have a branch, an error is returned.

#### Examples

```superhtml
<div :text="$build.git().branch()"></div>
<div :if="$build.git?()"><span :text="$if.branch()"></span></div>
```
### []($heading.id("Git.branch?")) [`fn`]($link.ref("Git.branch?")) branch? () -> [String]($link.ref("String"))

Returns the branch of the current commit.
If the current commit does not have a branch, null is returned.

#### Examples

```superhtml
<div :if="$build.git().branch?()"><span :text="$if"></span></div>
<div :if="$build.git?()"><span :if="$if.branch?()"><span :text="$if"></span></span></div>
```
# [Asset]($section.id('Asset'))

Represents an asset.

## Functions

### []($heading.id("Asset.link")) [`fn`]($link.ref("Asset.link")) link () -> [String]($link.ref("String"))

Returns a link to the asset.

Calling `link` on an asset will cause it to be installed
under the same relative path into the output directory.

    `content/post/bar.jpg` -> `public/post/bar.jpg`
  `assets/foo/bar/baz.jpg` -> `public/foo/bar/baz.jpg`

Build assets will be installed under the path defined in
your `build.zig`.

#### Examples

```superhtml
<img src="$site.asset('logo.jpg').link()">
<img src="$page.asset('profile.jpg').link()">
```
### []($heading.id("Asset.size")) [`fn`]($link.ref("Asset.size")) size () -> [String]($link.ref("String"))

Returns the size of an asset file in bytes.

#### Examples

```superhtml
<div :text="$site.asset('foo.json').size()"></div>
```
### []($heading.id("Asset.bytes")) [`fn`]($link.ref("Asset.bytes")) bytes () -> [String]($link.ref("String"))

Returns the raw contents of an asset.

#### Examples

```superhtml
<div :text="$page.assets.file('foo.json').bytes()"></div>
```
### []($heading.id("Asset.sriHash")) [`fn`]($link.ref("Asset.sriHash")) sriHash () -> [String]($link.ref("String"))

Returns the Base64-encoded SHA384 hash of an asset, prefixed with `sha384-`, for use with Subresource Integrity.

#### Examples

```superhtml
<script src="$site.asset('foo.js').link()" integrity="$site.asset('foo.js').sriHash()"></script>
```
### []($heading.id("Asset.ziggy")) [`fn`]($link.ref("Asset.ziggy")) ziggy () -> [any]($link.ref("any"))

Tries to parse the asset as a Ziggy document.

#### Examples

```superhtml
<div :text="$page.assets.file('foo.ziggy').ziggy().get('bar')"></div>
```
# [Map]($section.id('Map'))

A map that can hold any value, used to represent the `custom` field 
in Page frontmatters or Ziggy / JSON data loaded from assets.

## Functions

### []($heading.id("Map.getOr")) [`fn`]($link.ref("Map.getOr")) getOr ([String]($link.ref("String")), [String]($link.ref("String"))) -> [String]($link.ref("String"))

Tries to get a value from a map, returns the second value on failure.


#### Examples

```superhtml
$page.custom.getOr('coauthor', 'Loris Cro')
```
### []($heading.id("Map.get")) [`fn`]($link.ref("Map.get")) get ([String]($link.ref("String"))) -> [any]($link.ref("any"))

Tries to get a value from a map, errors out if the value is not present.


#### Examples

```superhtml
$page.custom.get('coauthor')
```
### []($heading.id("Map.get?")) [`fn`]($link.ref("Map.get?")) get? ([String]($link.ref("String"))) -> ?[any]($link.ref("any"))

Tries to get a dynamic value, to be used in conjuction with an `if` attribute.


#### Examples

```superhtml
<div :if="$page.custom.get?('myValue')">
  <span :text="$if"></span>
</div>
```
### []($heading.id("Map.has")) [`fn`]($link.ref("Map.has")) has ([String]($link.ref("String"))) -> [Bool]($link.ref("Bool"))

Returns true if the map contains the provided key.


#### Examples

```superhtml
<div :if="$page.custom.has('myValue')">Yep!</div>
```
### []($heading.id("Map.iterate")) [`fn`]($link.ref("Map.iterate")) iterate () -> [[KV]($link.ref("KV"))] *(see also [[any]]($link.ref("Array")))*   

Iterates over key-value pairs of a Ziggy map.

#### Examples

```superhtml
$page.custom.iterate()
```
### []($heading.id("Map.iterPattern")) [`fn`]($link.ref("Map.iterPattern")) iterPattern ([String]($link.ref("String"))) -> [[KV]($link.ref("KV"))] *(see also [[any]]($link.ref("Array")))*   

Iterates over key-value pairs of a Ziggy map where the key
matches the given pattern.

#### Examples

```superhtml
$page.custom.iterPattern("user-")
```
# [?any]($section.id('any'))

An optional value, to be used in conjunction with `if` attributes.

# [String]($section.id('String'))

A string.

## Functions

### []($heading.id("String.len")) [`fn`]($link.ref("String.len")) len () -> [Int]($link.ref("Int"))

Returns the length of a string.


#### Examples

```superhtml
$page.title.len()
```
### []($heading.id("String.contains")) [`fn`]($link.ref("String.contains")) contains ([String]($link.ref("String"))) -> [Bool]($link.ref("Bool"))

Returns true if the receiver contains the provided string.


#### Examples

```superhtml
$page.permalink().contains("/blog/")
```
### []($heading.id("String.endsWith")) [`fn`]($link.ref("String.endsWith")) endsWith ([String]($link.ref("String"))) -> [Bool]($link.ref("Bool"))

Returns true if the receiver ends with the provided string.


#### Examples

```superhtml
$page.permalink().endsWith("/blog/")
```
### []($heading.id("String.eql")) [`fn`]($link.ref("String.eql")) eql ([String]($link.ref("String"))) -> [Bool]($link.ref("Bool"))

Returns true if the receiver equals the provided string.


#### Examples

```superhtml
$page.author.eql("Loris Cro")
```
### []($heading.id("String.basename")) [`fn`]($link.ref("String.basename")) basename () -> [String]($link.ref("String"))

Returns the last component of a path.

#### Examples

```superhtml
TODO
```
### []($heading.id("String.suffix")) [`fn`]($link.ref("String.suffix")) suffix ([String]($link.ref("String")), [[String]($link.ref("String"))...]) -> [String]($link.ref("String"))

Concatenates strings together (left-to-right).


#### Examples

```superhtml
$page.title.suffix("Foo","Bar", "Baz")
```
### []($heading.id("String.prefix")) [`fn`]($link.ref("String.prefix")) prefix ([String]($link.ref("String")), [[String]($link.ref("String"))...]) -> [String]($link.ref("String"))

Concatenates strings together (left-to-right) and
prepends them to the receiver string.

#### Examples

```superhtml
$page.title.prefix("Foo","Bar", "Baz")
```
### []($heading.id("String.fmt")) [`fn`]($link.ref("String.fmt")) fmt ([String]($link.ref("String")), [[String]($link.ref("String"))...]) -> [String]($link.ref("String"))

Looks for '{}' placeholders in the receiver string and 
replaces them with the provided arguments.


#### Examples

```superhtml
$i18n.get!("welcome-message").fmt($page.custom.get!("name"))
```
### []($heading.id("String.addPath")) [`fn`]($link.ref("String.addPath")) addPath ([String]($link.ref("String")), [[String]($link.ref("String"))...]) -> [String]($link.ref("String"))

Joins URL path segments automatically adding `/` as needed. 

#### Examples

```superhtml
$site.host_url.addPath("rss.xml")
$site.host_url.addPath("foo/bar", "/baz")
```
### []($heading.id("String.syntaxHighlight")) [`fn`]($link.ref("String.syntaxHighlight")) syntaxHighlight ([String]($link.ref("String"))) -> [String]($link.ref("String"))

Applies syntax highlighting to a string.
The argument specifies the language name.


#### Examples

```superhtml
<pre>
  <code class="ziggy" 
        :html="$page.custom.get('sample').syntaxHighLight('ziggy')"
  ></code>
</pre>
```
### []($heading.id("String.parseInt")) [`fn`]($link.ref("String.parseInt")) parseInt () -> [Int]($link.ref("Int"))

Parses an integer out of a string


#### Examples

```superhtml
$page.custom.get!('not-a-num-for-some-reason').parseInt()
```
### []($heading.id("String.parseDate")) [`fn`]($link.ref("String.parseDate")) parseDate () -> [Date]($link.ref("Date"))

Parses a Date out of a string.

#### Examples

```superhtml
$page.custom.get('foo').parseDate()
```
### []($heading.id("String.splitN")) [`fn`]($link.ref("String.splitN")) splitN ([String]($link.ref("String")), [Int]($link.ref("Int"))) -> [String]($link.ref("String"))

Splits the string using the first string argument as delimiter and then
returns the Nth substring (where N is the second argument).

Indices start from 0.


#### Examples

```superhtml
$page.author.splitN(" ", 1)
```
### []($heading.id("String.lower")) [`fn`]($link.ref("String.lower")) lower () -> [String]($link.ref("String"))

Returns a lowercase version of the target string.


#### Examples

```superhtml
$page.title.lower()
```
# [Date]($section.id('Date'))

A datetime.

## Functions

### []($heading.id("Date.gt")) [`fn`]($link.ref("Date.gt")) gt ([Date]($link.ref("Date"))) -> [Bool]($link.ref("Bool"))

Return true if lhs is later than rhs (the argument).


#### Examples

```superhtml
$page.date.gt($page.custom.expiry_date)
```
### []($heading.id("Date.lt")) [`fn`]($link.ref("Date.lt")) lt ([Date]($link.ref("Date"))) -> [Bool]($link.ref("Bool"))

Return true if lhs is earlier than rhs (the argument).


#### Examples

```superhtml
$page.date.lt($page.custom.expiry_date)
```
### []($heading.id("Date.eq")) [`fn`]($link.ref("Date.eq")) eq ([Date]($link.ref("Date"))) -> [Bool]($link.ref("Bool"))

Return true if lhs is the same instant as the rhs (the argument).


#### Examples

```superhtml
$page.date.eq($page.custom.expiry_date)
```
### []($heading.id("Date.format")) [`fn`]($link.ref("Date.format")) format ([String]($link.ref("String"))) -> [String]($link.ref("String"))

Formats a datetime according to the specified format string.

Zine uses Go-style format strings, which are all variations based
on a "magic date":

- `Mon Jan 2 15:04:05 MST 2006`

By tweaking its components you can specify various formatting styles.

#### Examples

```superhtml
$page.date.format("January 02, 2006")
$page.date.format("06-Jan-02")
$page.date.format("2006/01/02")
$page.date.format("2006/01/02 15:04 MST")
```
### []($heading.id("Date.formatHTTP")) [`fn`]($link.ref("Date.formatHTTP")) formatHTTP () -> [String]($link.ref("String"))

Formats a datetime according to the HTTP spec.


#### Examples

```superhtml
$page.date.formatHTTP()
```
# [Bool]($section.id('Bool'))

A boolean value

## Functions

### []($heading.id("Bool.then")) [`fn`]($link.ref("Bool.then")) then ([String]($link.ref("String")), ?[String]($link.ref("String"))) -> [String]($link.ref("String"))

If the boolean is `true`, returns the first argument.
Otherwise, returns the second argument.

The second argument defaults to an empty string.


#### Examples

```superhtml
$page.draft.then("<alert>DRAFT!</alert>")
```
### []($heading.id("Bool.not")) [`fn`]($link.ref("Bool.not")) not () -> [Bool]($link.ref("Bool"))

Negates a boolean value.


#### Examples

```superhtml
$page.draft.not()
```
### []($heading.id("Bool.and")) [`fn`]($link.ref("Bool.and")) and ([Bool]($link.ref("Bool")), [[Bool]($link.ref("Bool"))...]) -> [Bool]($link.ref("Bool"))

Computes logical `and` between the receiver value and any other 
value passed as argument.

#### Examples

```superhtml
$page.draft.and($site.tags.len().eq(10))
```
### []($heading.id("Bool.or")) [`fn`]($link.ref("Bool.or")) or ([Bool]($link.ref("Bool")), [[Bool]($link.ref("Bool"))...]) -> [Bool]($link.ref("Bool"))

Computes logical `or` between the receiver value and any other value passed as argument.


#### Examples

```superhtml
$page.draft.or($site.tags.len().eq(0))
```
# [Int]($section.id('Int'))

A signed 64-bit integer.

## Functions

### []($heading.id("Int.eq")) [`fn`]($link.ref("Int.eq")) eq ([Int]($link.ref("Int"))) -> [Bool]($link.ref("Bool"))

Tests if two integers have the same value.


#### Examples

```superhtml
$page.wordCount().eq(200)
```
### []($heading.id("Int.gt")) [`fn`]($link.ref("Int.gt")) gt ([Int]($link.ref("Int"))) -> [Bool]($link.ref("Bool"))

Returns true if lhs is greater than rhs (the argument).


#### Examples

```superhtml
$page.wordCount().gt(200)
```
### []($heading.id("Int.plus")) [`fn`]($link.ref("Int.plus")) plus ([Int]($link.ref("Int"))) -> [Int]($link.ref("Int"))

Sums two integers.


#### Examples

```superhtml
$page.wordCount().plus(10)
```
### []($heading.id("Int.div")) [`fn`]($link.ref("Int.div")) div ([Int]($link.ref("Int"))) -> [Int]($link.ref("Int"))

Divides the receiver by the argument.


#### Examples

```superhtml
$page.wordCount().div(10)
```
### []($heading.id("Int.byteSize")) [`fn`]($link.ref("Int.byteSize")) byteSize () -> [String]($link.ref("String"))

Turns a raw number of bytes into a human readable string that
appropriately uses Kilo, Mega, Giga, etc.


#### Examples

```superhtml
$page.asset('photo.jpg').size().byteSize()
```
# [Float]($section.id('Float'))

A 64bit float value.

# [Iterator]($section.id('Iterator'))

An iterator.

## Fields

### [`it`]($text.id('Iterator.it')) : [any]($link.ref("any"))

The current iteration variable.

### [`idx`]($text.id('Iterator.idx')) : [Int]($link.ref("Int"))

The current iteration index.

### [`first`]($text.id('Iterator.first')) : [Bool]($link.ref("Bool"))

True on the first iteration loop.

### [`last`]($text.id('Iterator.last')) : [Bool]($link.ref("Bool"))

True on the last iteration loop.

### [`len`]($text.id('Iterator.len')) : [Int]($link.ref("Int"))

The length of the sequence being iterated.

## Functions

### []($heading.id("Iterator.up")) [`fn`]($link.ref("Iterator.up")) up () -> [Iterator]($link.ref("Iterator"))

In nested loops, accesses the upper `$loop`


#### Examples

```superhtml
$loop.up().it
```
# [Array]($section.id('Array'))

An array of items.

## Fields

### [`len`]($text.id('Array.len')) : [Int]($link.ref("Int"))

The length of the array.

### [`empty`]($text.id('Array.empty')) : [Bool]($link.ref("Bool"))

True when len is 0.

## Functions

### []($heading.id("Array.slice")) [`fn`]($link.ref("Array.slice")) slice ([Int]($link.ref("Int")), ?[Int]($link.ref("Int"))) -> [[any]($link.ref("any"))]

Slices an array from the first value (inclusive) to the
second value (exclusive).

The second value can be omitted and defaults to the array's
length, meaning that invoking `slice` with one argunent 
produces **suffixes** of the original sequence.

Note that negative values are not allowed at the moment.

#### Examples

```superhtml
$page.tags.slice(0,1)
```
### []($heading.id("Array.at")) [`fn`]($link.ref("Array.at")) at ([Int]($link.ref("Int"))) -> [any]($link.ref("any"))

Returns the value at the provided index. 

#### Examples

```superhtml
$page.tags.at(0)
```
### []($heading.id("Array.first?")) [`fn`]($link.ref("Array.first?")) first? () -> [[any]($link.ref("any"))]

Returns the the first value of the array or null if the array is empty. 

#### Examples

```superhtml
$page.tags.first?()
```
### []($heading.id("Array.last?")) [`fn`]($link.ref("Array.last?")) last? () -> [[any]($link.ref("any"))]

Returns the the last value of the array or null if the array is empty. 

#### Examples

```superhtml
$page.tags.last?()
```
# [KV]($section.id('KV'))

A key-value pair.

## Fields

### [`key`]($text.id('KV.key')) : [String]($link.ref("String"))

The key string.

### [`value`]($text.id('KV.value')) : [any]($link.ref("any"))

The corresponding value.

# [err]($section.id('err'))

A Scripty error.

In Scripty all errors are unrecoverable.
When available, you can use `?` variants 
of functions (e.g. `get?`) to obtain a null
value instead of an error. 

